{# Build nodes_data.nodes_list #}
{% set nodes_list = [] %}
{% set avd_ext_nodes = {} %}
{% set ns = namespace(avd_ext_nodes_count = 0) %}
{% for node in ansible_play_hosts_all | arista.avd.natural_sort %}
{%     if hostvars[node].ethernet_interfaces is defined %}
{%         set node_dict = dict() %}
{%         do node_dict.update({node: dict()}) %}
{# {%         do node_dict[node].update({"ip_addr": "192.168.0.1" ~ loop.index}) %} #}
{%         set node_mgmt_interfaces = [] %}
{%         if hostvars[node].management_interfaces is defined and hostvars[node].management_interfaces is mapping %}
{%             for ifname, ifdata in hostvars[node].management_interfaces.items() %}
{%                 do ifdata.update({"name": ifname}) %}
{%                 do node_mgmt_interfaces.append(ifdata) %}
{%             endfor %}
{%         elif hostvars[node].management_interfaces is defined %}
{%             set node_mgmt_interfaces = hostvars[node].management_interfaces %}
{%         endif %}
{%         for mgmt_if in node_mgmt_interfaces %}
{%             set node_mgmt_ip = mgmt_if.ip_address | split("/") %}
{%             do node_dict[node].update({"ip_addr": node_mgmt_ip[0]}) %}
{%             break %}
{%         endfor %}
{%         do node_dict[node].update({"node_type": "veos"}) %}
{%         do node_dict[node].update({"neighbors": []}) %}
{%         do node_dict[node].update({"ports": []}) %}
{%         set node_ethernet_interfaces = [] %}
{#         version 3 of avd uses dict of dicts for interfaces #}
{%         if hostvars[node].ethernet_interfaces is defined and hostvars[node].ethernet_interfaces is mapping %}
{%             for ifname, ifdata in hostvars[node].ethernet_interfaces.items() %}
{%                 do ifdata.update({"name": ifname}) %}
{%                 do node_ethernet_interfaces.append(ifdata) %}
{%             endfor %}
{%         else %}
{%             set node_ethernet_interfaces = hostvars[node].ethernet_interfaces %}
{%         endif %}
{%         for ifdata in node_ethernet_interfaces %}
{%             if "peer" in ifdata and "peer_interface" in ifdata and "." not in ifdata.name %}
{#                 add fabric connected nodes #}
{%                 if ifdata["peer"] in ansible_play_hosts_all %}
{%                     set neighbordict = dict() %}
{%                     do neighbordict.update({"neighborDevice": ifdata["peer"]}) %}
{%                     do neighbordict.update({"neighborPort": ifdata["peer_interface"]}) %}
{%                     do neighbordict.update({"port": ifdata.name}) %}
{%                     do node_dict[node]["neighbors"].append(neighbordict) %}
{#                 add non-fabric connected nodes if toggle is set and peer_type is within given map #}
{%                 elif act_add_connected_nodes == true and ifdata["peer_type"] in act_connected_nodes_map %}
{%                     set peer_node = ifdata["peer"] %}
{%                     set avd_ext_node_neighbordict = dict() %}
{%                     do avd_ext_node_neighbordict.update({"neighborDevice": node}) %}
{%                     do avd_ext_node_neighbordict.update({"neighborPort": ifdata.name}) %}
{%                     do avd_ext_node_neighbordict.update({"port": ifdata["peer_interface"]}) %}
{%                     if peer_node not in avd_ext_nodes %}
{%                         do avd_ext_nodes.update({peer_node: dict()}) %}
{%                         set mgmt_ip = act_connected_nodes_range | ansible.utils.ipaddr('network') | ansible.utils.ipmath(ns.avd_ext_nodes_count)  %}
{%                         set ns.avd_ext_nodes_count = ns.avd_ext_nodes_count + 1 %}
{%                         do avd_ext_nodes[peer_node].update({"ip_addr": mgmt_ip}) %}
{%                         do avd_ext_nodes[peer_node].update({"node_type": act_connected_nodes_map[ifdata["peer_type"]]}) %}
{%                         do avd_ext_nodes[peer_node].update({"neighbors": []}) %}
{%                         do avd_ext_nodes[peer_node].update({"ports": []}) %}
{%                         do avd_ext_nodes[peer_node]["neighbors"].append(avd_ext_node_neighbordict) %}
{%                     else %}
{%                         do avd_ext_nodes[peer_node]["neighbors"].append(avd_ext_node_neighbordict) %}
{%                     endif %}
{%                     set neighbordict = dict() %}
{%                     do neighbordict.update({"neighborDevice": ifdata["peer"]}) %}
{%                     do neighbordict.update({"neighborPort": ifdata["peer_interface"]}) %}
{%                     do neighbordict.update({"port": ifdata.name}) %}
{%                     do node_dict[node]["neighbors"].append(neighbordict) %}
{%                 else %}
{%                     do node_dict[node].ports.append(ifdata.name) %}
{%                 endif %}
{%             elif "." not in ifdata.name %}
{%                 do node_dict[node].ports.append(ifdata.name) %}
{%             endif %}
{%         endfor %}
{%         do nodes_list.append(node_dict) %}
{%     endif %}
{% endfor %}
{# Add the other nodes to the list #}
{% for node in avd_ext_nodes %}
{%     do nodes_list.append({ node: avd_ext_nodes[node] }) %}
{% endfor %}
{% if act_add_cvp and act_cvp_auto_configuration %}
{%     do nodes_list.append({ "cvp": {"ip_addr": act_cvp_ip, "node_type": "cvp", "auto_configuration": act_cvp_auto_configuration, "username":act_device_user, "password":act_device_password }}) %}
{% elif act_add_cvp %}
{%     do nodes_list.append({ "cvp": {"ip_addr": act_cvp_ip, "node_type": "cvp" }}) %}
{% endif %}
{% if act_add_ansible_node %}
{%     do nodes_list.append({"ansible": {"ip_addr": act_ansible_ip, "node_type": "generic"}}) %}
{% endif %}
{% set nodes_data.nodes = {"nodes": nodes_list} %}
{# Build nodes_data.node_defaults #}
{% set node_defaults = dict() %}
{% do node_defaults.update({"veos": {"username": act_device_user, "password": act_device_password, "version": act_eos_version}}) %}
{% do node_defaults.update({"cvp": {"username": act_cvp_user, "password": act_cvp_password, "instance": act_cvp_instance_type, "version": act_cvp_version}}) %}
{% do node_defaults.update({"generic": {"username": act_device_user, "password": act_device_password, "version": act_generic_os_version}}) %}
{% set nodes_data.node_defaults = node_defaults %}
